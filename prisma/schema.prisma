generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Used for migrations and direct connections
}

model User {
  id            String     @id @default(uuid())
  username      String     @unique
  email         String     @unique
  password_hash String
  role          Role       @default(USER)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  posts         BlogPost[]
}

model BlogPost {
  id               String        @id @default(uuid())
  title            String
  content          String        @db.Text
  author           User          @relation(fields: [author_id], references: [id])
  author_id        String
  status           PostStatus    @default(DRAFT)
  category         PostCategory
  featured_image   String?
  file_attachment  String?       // For publications PDFs
  apply_url        String?       // For careers
  location         String?       // For careers/tenders
  deadline         DateTime?     // For tenders/careers
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  published_at     DateTime?

  category_id      String?
}

model TeamMember {
  id         String   @id @default(uuid())
  name       String
  title      String
  bio        String   @db.Text
  photo_url  String
  order      Int      @default(0) // For display ordering
  joined_at  DateTime @default(now())
}

model ContactFormSubmission {
  id           String   @id @default(uuid())
  name         String
  email        String
  message      String   @db.Text
  submitted_at DateTime @default(now())
}

model ImpactMetric {
  id          String   @id @default(uuid())
  metric_name String
  value       Int      // Changed from Float to Int
  updated_at  DateTime @updatedAt
}

enum Role {
  ADMIN
  CONTENT_MANAGER // Added for category-specific managers
  USER
}

enum PostCategory {
  BLOG
  PUBLICATION
  IMPACT_STORY
  TENDER
  CAREER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PartnershipType {
  CORPORATE
  COMMUNITY
  RESEARCH
}

enum DonationFrequency {
  ONE_TIME
  MONTHLY
  ANNUAL
}

enum PaymentMethod {
  CREDIT_CARD
  PAYPAL
  BANK_TRANSFER
}

enum VolunteerInterest {
  FIELDWORK
  EDUCATION
  RESEARCH
}

enum Availability {
  WEEKDAYS
  WEEKENDS
  BOTH
}

model Subscription {
  id             String   @id @default(cuid())
  email          String   @unique
  subscribed_at  DateTime @default(now())
  unsubscribed_at DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([subscribed_at])
  @@index([unsubscribed_at])
  @@map("newsletter_subscriptions")
}

model Partnership {
  id              String         @id @default(cuid())
  organization    String
  contactEmail    String
  partnershipType PartnershipType
  proposal        String
  createdAt       DateTime       @default(now())

  @@index([createdAt])
  @@index([partnershipType])
}

model Donation {
  id            String           @id @default(cuid())
  amount        Float            // Using Float for currency (consider Decimal for precision)
  frequency     DonationFrequency
  paymentMethod PaymentMethod
  transactionId String?          // For payment gateway references
  donorEmail    String
  createdAt     DateTime         @default(now())

  @@index([createdAt])
  @@index([donorEmail])
  @@index([paymentMethod])
}

model Volunteer {
  id           String           @id @default(cuid())
  fullName     String
  email        String
  phone        String?
  interests    VolunteerInterest
  availability Availability
  skills       String?          // Optional skills description
  createdAt    DateTime         @default(now())

  @@index([createdAt])
  @@index([email])
  @@index([interests])
}